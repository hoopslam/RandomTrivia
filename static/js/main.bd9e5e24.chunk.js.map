{"version":3,"sources":["API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd9e5e24.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n\tcategory: string;\r\n\tcorrect_answer: string;\r\n\tdifficulty: string;\r\n\tincorrect_answers: string[];\r\n\tquestion: string;\r\n\ttype: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n\tEASY = \"easy\",\r\n\tMEDIUM = \"medium\",\r\n\tHARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n\tconst endpoint = `https://opentdb.com/api.php?amount=${amount}&category=22&difficulty=${difficulty}&type=multiple`;\r\n\tconst data = await (await fetch(endpoint)).json(); //first await fetch, then await json conversion\r\n\treturn data.results.map((question: Question) => ({\r\n\t\t...question,\r\n\t\tanswers: shuffleArray([...question.incorrect_answers, question.correct_answer]),\r\n\t}));\r\n};","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n\tmax-width: 1100px;\r\n\tbackground: #ebfeff;\r\n\tborder-radius: 10px;\r\n\tborder: 2px solid #0085a3;\r\n\tpadding: 20px;\r\n\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n\r\n\tp {\r\n\t\tfont-size: 1rem;\r\n\t}\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n\tcorrect: boolean;\r\n\tuserClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n    \r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({ correct, userClicked }) =>\r\n\t\t\tcorrect\r\n\t\t\t\t? \"linear-gradient(90deg, #56ffa4, #59bc86)\"\r\n\t\t\t\t: !correct && userClicked\r\n\t\t\t\t? \"linear-gradient(90deg, #ff5656, #c16868)\"\r\n\t\t\t\t: \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\r\n        border: 3px solid #fff;\r\n        box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25);\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\r\n\r\ntype Props = {\r\n\tquestion: string;\r\n\tanswers: string[];\r\n\tcallback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n\tuserAnswer: AnswerObject | undefined;\r\n\tquestionNumber: number;\r\n\ttotalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n\tquestion,\r\n\tanswers,\r\n\tcallback,\r\n\tuserAnswer,\r\n\tquestionNumber,\r\n\ttotalQuestions,\r\n}) => {\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<p className='number'>\r\n\t\t\t\tQuestion: {questionNumber} / {totalQuestions}\r\n\t\t\t</p>\r\n\t\t\t<p dangerouslySetInnerHTML={{ __html: question }} />\r\n\t\t\t<div>\r\n\t\t\t\t{answers.map((answer) => (\r\n\t\t\t\t\t<ButtonWrapper\r\n\t\t\t\t\t\tkey={answer}\r\n\t\t\t\t\t\tcorrect={userAnswer?.correctAnswer === answer}\r\n\t\t\t\t\t\tuserClicked={userAnswer?.answer === answer}>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tdisabled={userAnswer ? true : false}\r\n\t\t\t\t\t\t\tvalue={answer}\r\n\t\t\t\t\t\t\tonClick={callback}>\r\n\t\t\t\t\t\t\t<span dangerouslySetInnerHTML={{ __html: answer }} />\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</ButtonWrapper>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</Wrapper>\r\n\t);\r\n};\r\n\r\nexport default QuestionCard;\r\n","export const shuffleArray = (array: any[]) => (\r\n    [...array].sort(() => Math.random() - 0.5)\r\n)","import styled, {createGlobalStyle} from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background:rgb(200,200,200);\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    *{\r\n        box-sizing: border-box;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    > p {\r\n        color: white;\r\n    }\r\n\r\n    .score {\r\n        color: white;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .start, .next {\r\n        cursor: pointer;\r\n        background: rgb(200,200,200);\r\n        border: 2px solid #d38558;\r\n        box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n`","import React, { useState } from \"react\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { fetchQuizQuestions } from \"./API\";\nimport { Difficulty, QuestionState } from \"./API\";\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n\tquestion: string;\n\tanswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\tconsole.log(questions);\n\n\tconst startTrivia = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\n\t\tconst newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n\t\tsetQuestions(newQuestions);\n\t\tsetScore(0);\n\t\tsetUserAnswers([]);\n\t\tsetNumber(0);\n\t\tsetLoading(false);\n\t};\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) {\n\t\t\t//user answer\n\t\t\tconst answer = e.currentTarget.value;\n\t\t\t//compare user answer to correct answer\n\t\t\tconst correct = questions[number].correct_answer === answer;\n\t\t\t//add score if answer is correct\n\t\t\tif (correct) setScore((prev) => prev + 1);\n\t\t\t// save answer in the array for user answers\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer: answer,\n\t\t\t\tcorrect: correct,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer,\n\t\t\t};\n\t\t\tsetUserAnswers((prev) => [...prev, answerObject]);\n\t\t}\n\t};\n\n\tconst nextQuestion = () => {\n\t\tconst nextQuestion = number + 1;\n\t\tif (nextQuestion === TOTAL_QUESTIONS) {\n\t\t\tsetGameOver(true);\n\t\t} else {\n\t\t\tsetNumber(nextQuestion);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyle />\n\t\t\t<Wrapper>\n\t\t\t\t<h1>World Geography Quiz</h1>\n\t\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t\t\t<button className='start' onClick={startTrivia}>\n\t\t\t\t\t\tStart\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t\t{!gameOver && <p className='score'>Score: {score}</p>}\n\t\t\t\t{loading && <p>Loading Questions</p>}\n\t\t\t\t{!loading && !gameOver && (\n\t\t\t\t\t<QuestionCard\n\t\t\t\t\t\tquestionNumber={number + 1}\n\t\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{!gameOver && //show next question button only when these conditions are met\n\t\t\t\t!loading &&\n\t\t\t\tuserAnswers.length === number + 1 &&\n\t\t\t\tnumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t\t<button className='next' onClick={nextQuestion}>\n\t\t\t\t\t\tNext Question\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t</Wrapper>\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}